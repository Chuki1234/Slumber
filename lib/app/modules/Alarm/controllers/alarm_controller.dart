import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:just_audio/just_audio.dart';
import 'dart:async';

import '../../../../service/alarm_sound_service.dart';
import '../../../data/models/alarm_sound.dart';

class AlarmController extends GetxController {

  /// ‚è∞ Th·ªùi gian b√°o th·ª©c
  final Rx<TimeOfDay> alarmTime = TimeOfDay(hour: 7, minute: 0).obs;

  /// Tr·∫°ng th√°i b√°o th·ª©c ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ch∆∞a
  final isTriggered = false.obs;

  /// üîâ Danh s√°ch nh·∫°c chu√¥ng t·ª´ Supabase
  var alarmSounds = <AlarmSound>[].obs;

  /// Nh·∫°c chu√¥ng ƒë√£ ch·ªçn
  var selectedAlarmSound = Rxn<AlarmSound>();

  /// √Çm l∆∞·ª£ng b√°o th·ª©c (0.0 - 1.0)
  var alarmVolume = 1.0.obs;

  /// C√≥ rung khi b√°o kh√¥ng
  var vibrationEnabled = true.obs;

  /// Smart Alarm offset (n·∫øu c√≥)
  var smartAlarmOffsetMinutes = 0.obs;

  /// S·ªë ph√∫t ho√£n l·∫°i khi snooze
  var snoozeMinutes = 5.obs;

  /// Audio player
  final _player = AudioPlayer();
  Timer? _previewTimer;

  /// Ch·ªçn th·ªùi gian b√°o th·ª©c m·ªõi
  Future<void> pickTime(BuildContext context) async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: alarmTime.value,
    );
    if (picked != null && picked != alarmTime.value) {
      alarmTime.value = picked;
      isTriggered.value = false;
    }
  }

  /// Load danh s√°ch √¢m thanh t·ª´ Supabase
  Future<void> loadAlarmSounds() async {
    final sounds = await AlarmSoundService().fetchAllSounds();
    alarmSounds.assignAll(sounds);
    if (selectedAlarmSound.value == null && sounds.isNotEmpty) {
      selectedAlarmSound.value = sounds.first;
    }
  }

  /// Nghe th·ª≠ trong 5 gi√¢y
  Future<void> playPreview(String url) async {
    try {
      await _player.setUrl(url);
      await _player.setVolume(alarmVolume.value);
      await _player.play();

      _previewTimer?.cancel();
      _previewTimer = Timer(const Duration(seconds: 5), () {
        _player.stop();
      });
    } catch (e) {
      print("‚ùå Preview error: $e");
    }
  }

  void stopPreview() {
    _player.stop();
    _previewTimer?.cancel();
  }

  /// Ph√°t chu√¥ng khi ƒë·∫øn gi·ªù (loop)
  Future<void> playAlarmSound() async {
    try {
      final sound = selectedAlarmSound.value;
      if (sound == null) return;

      await _player.setUrl(sound.publicUrl);
      await _player.setLoopMode(LoopMode.one); // üîÅ l·∫∑p li√™n t·ª•c
      await _player.setVolume(alarmVolume.value);
      await _player.play();
    } catch (e) {
      print("‚ùå Alarm playback error: $e");
    }
  }

  /// D·ª´ng b√°o th·ª©c
  void stopAlarmSound() {
    _player.stop();
    isTriggered.value = true; // ‚úÖ kh√≥a l·∫°i ƒë·ªÉ kh√¥ng b√°o l·∫°i trong ph√∫t n√†y
  }
  DateTime? _lastTriggerTime;
  /// Ki·ªÉm tra n·∫øu ƒë·∫øn gi·ªù th√¨ k√≠ch ho·∫°t b√°o th·ª©c
  void checkAlarmAndTrigger(Function onTrigger) {
    final now = TimeOfDay.now();
    final alarm = alarmTime.value;

    final alreadyTriggeredThisMinute = _lastTriggerTime != null &&
        DateTime.now().difference(_lastTriggerTime!).inMinutes < 1;

    if (now.hour == alarm.hour &&
        now.minute == alarm.minute &&
        !alreadyTriggeredThisMinute) {
      _lastTriggerTime = DateTime.now(); // ghi nh·∫≠n ƒë√£ k√™u
      onTrigger();
    }
  }
  void updateAlarmTime(TimeOfDay newTime) {
    alarmTime.value = newTime;
    isTriggered.value = false; // reset b√°o th·ª©c
  }

  @override
  void onClose() {
    _player.dispose();
    _previewTimer?.cancel();
    super.onClose();
  }
}