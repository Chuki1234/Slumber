import 'dart:async';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class BedtimeController extends GetxController {
  // Gi·ªù ƒëi ng·ªß
  var bedTime = TimeOfDay.now().obs;

  // Th·ªùi gian nh·∫Øc tr∆∞·ªõc khi ng·ªß
  var remindBefore = const Duration(minutes: 5).obs;

  // B·∫≠t/t·∫Øt nh·∫Øc nh·ªü
  var isReminderEnabled = true.obs;

  // Timer ki·ªÉm tra ƒë·ªãnh k·ª≥
  Timer? _reminderTimer;

  // Tr√°nh nh·∫Øc nh·ªü l·∫∑p l·∫°i trong c√πng m·ªôt ph√∫t
  TimeOfDay? _lastReminderShownAt;

  /// Ch·ªçn gi·ªù ƒëi ng·ªß
  void pickTime(BuildContext context) async {
    final newTime = await showTimePicker(
      context: context,
      initialTime: bedTime.value,
    );
    if (newTime != null) {
      bedTime.value = newTime;
      print('Gi·ªù ƒëi ng·ªß ƒë√£ ch·ªçn: $newTime');
    }
  }

  /// C·∫≠p nh·∫≠t kho·∫£ng th·ªùi gian nh·∫Øc
  void updateReminder(Duration duration) {
    remindBefore.value = duration;
    print('C·∫≠p nh·∫≠t remindBefore: ${duration.inMinutes} ph√∫t');
  }

  /// B·∫≠t/t·∫Øt nh·∫Øc nh·ªü
  void setReminderEnabled(bool enabled) {
    isReminderEnabled.value = enabled;
    print('Nh·∫Øc nh·ªü: ${enabled ? 'B·∫≠t' : 'T·∫Øt'}');
  }

  /// B·∫Øt ƒë·∫ßu ki·ªÉm tra nh·∫Øc nh·ªü
  void startReminderLoop(BuildContext context) {
    _reminderTimer?.cancel();

    _reminderTimer = Timer.periodic(const Duration(minutes: 1), (_) {
      if (!isReminderEnabled.value) {
        print('Nh·∫Øc nh·ªü ƒëang t·∫Øt');
        return;
      }

      final now = TimeOfDay.now();
      final reminderTime = _getReminderTime();

      print('üïë B√¢y gi·ªù: ${now.format(context)} | Nh·∫Øc l√∫c: ${reminderTime.format(context)}');

      if (_isSameTime(reminderTime, now) &&
          !_isSameTime(_lastReminderShownAt, now)) {
        _lastReminderShownAt = now;
        _showReminderSnackbar(context);
      }
    });

    print('üîÅ ƒê√£ b·∫Øt ƒë·∫ßu v√≤ng ki·ªÉm tra nh·∫Øc nh·ªü');
  }

  /// T√≠nh th·ªùi ƒëi·ªÉm c·∫ßn nh·∫Øc
  TimeOfDay _getReminderTime() {
    final bed = bedTime.value;
    final totalMinutes = bed.hour * 60 + bed.minute;
    final reminderMinutes = remindBefore.value.inMinutes;
    final adjusted = (totalMinutes - reminderMinutes + 1440) % 1440;
    return TimeOfDay(hour: adjusted ~/ 60, minute: adjusted % 60);
  }

  /// So s√°nh th·ªùi gian gi·ªù-ph√∫t
  bool _isSameTime(TimeOfDay? t1, TimeOfDay? t2) {
    if (t1 == null || t2 == null) return false;
    return t1.hour == t2.hour && t1.minute == t2.minute;
  }

  /// Hi·ªÉn th·ªã SnackBar nh·∫Øc nh·ªü
  void _showReminderSnackbar(BuildContext context) {
    if (!context.mounted) return;
    Get.snackbar(
      '‚è∞ Nh·∫Øc nh·ªü ƒëi ng·ªß',
      'ƒê√£ ƒë·∫øn gi·ªù ƒëi ng·ªß! H√£y chu·∫©n b·ªã ngh·ªâ ng∆°i.',
      snackPosition: SnackPosition.TOP,
      duration: const Duration(seconds: 3),
      backgroundColor: Colors.deepPurpleAccent,
      colorText: Colors.white,
    );
    print('üîî ƒê√£ hi·ªÉn th·ªã nh·∫Øc nh·ªü ƒëi ng·ªß');
  }

  /// D·ªçn d·∫πp timer khi dispose
  @override
  void onClose() {
    _reminderTimer?.cancel();
    super.onClose();
  }
}